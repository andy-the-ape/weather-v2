{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\honor\\\\GitHubLocalReps\\\\weather-client\\\\weather-app\\\\src\\\\pages\\\\History.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport TopButtons from '../components/TopButtons';\nimport ChartButtons from '../components/ChartButtons';\nimport axios from 'axios';\nimport LineChart from '../components/LineChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction History() {\n  _s();\n  const [weatherRecords, setWeatherRecords] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [{\n      label: 'Temperatur',\n      data: [],\n      backgroundColor: 'rgb(255, 99, 132)',\n      borderColor: 'rgb(255, 255, 255)',\n      borderWidth: 2\n    }]\n  });\n  useEffect(() => {\n    const baseURL = 'http://localhost:8080';\n    axios.get(`${baseURL}/api/v1/weather/history/48`).then(response => {\n      setWeatherRecords(response.data);\n\n      // Update chartData based on fetched weather records\n      const labels = response.data.map(record => record.date + '\\n' + record.time);\n      const data = response.data.map(record => [record.temperature, record.windSpeed, record.humidity]);\n      setChartData({\n        labels: labels,\n        datasets: [{\n          label: 'Temperatur',\n          data: data[i][0],\n          borderColor: 'rgb(255, 99, 132)',\n          backgroundColor: 'rgba(255, 99, 132, 0.5)',\n          borderWidth: 3\n        }, {\n          label: 'Vindhastighed',\n          data: data,\n          borderColor: 'rgb(53, 162, 235)',\n          backgroundColor: 'rgba(53, 162, 235, 0.5)',\n          borderWidth: 3\n        }, {\n          label: 'Luftfugtighed',\n          data: data,\n          borderColor: 'rgb(112, 171, 56)',\n          backgroundColor: 'rgba(112, 171, 56, 0.5)',\n          borderWidth: 3\n        }]\n      });\n      setLoading(false); // Update loading state\n    }).catch(error => {\n      setError(error);\n      setLoading(false); // Update loading state even if there's an error\n    });\n  }, []);\n  if (loading) return \"Loading...\"; // Display loading message while waiting for API response\n  if (error) return `Error: ${error.message}`;\n  if (!weatherRecords || weatherRecords.length === 0) return \"No weather records!\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"topbuttons\",\n        children: /*#__PURE__*/_jsxDEV(TopButtons, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chartContainer\",\n        children: /*#__PURE__*/_jsxDEV(LineChart, {\n          chartData: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChartButtons, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n_s(History, \"pYYFi/Rtb5Ecd6m7ARm/Jqm2ETc=\");\n_c = History;\nexport default History;\nvar _c;\n$RefreshReg$(_c, \"History\");","map":{"version":3,"names":["React","useState","useEffect","TopButtons","ChartButtons","axios","LineChart","jsxDEV","_jsxDEV","History","_s","weatherRecords","setWeatherRecords","error","setError","loading","setLoading","chartData","setChartData","labels","datasets","label","data","backgroundColor","borderColor","borderWidth","baseURL","get","then","response","map","record","date","time","temperature","windSpeed","humidity","i","catch","message","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/honor/GitHubLocalReps/weather-client/weather-app/src/pages/History.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport TopButtons from '../components/TopButtons';\r\nimport ChartButtons from '../components/ChartButtons';\r\nimport axios from 'axios';\r\nimport LineChart from '../components/LineChart';\r\n\r\nfunction History() {\r\n  const [weatherRecords, setWeatherRecords] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const [chartData, setChartData] = useState({\r\n    labels: [],\r\n    datasets: [\r\n      {\r\n        label: 'Temperatur',\r\n        data: [],\r\n        backgroundColor: 'rgb(255, 99, 132)',\r\n        borderColor: 'rgb(255, 255, 255)',\r\n        borderWidth: 2,\r\n      },\r\n    ]\r\n  });\r\n\r\n  useEffect(() => {\r\n    const baseURL = 'http://localhost:8080';\r\n    axios.get(`${baseURL}/api/v1/weather/history/48`)\r\n      .then((response) => {\r\n        setWeatherRecords(response.data);\r\n\r\n        // Update chartData based on fetched weather records\r\n        const labels = response.data.map((record) => record.date + '\\n' + record.time);\r\n        const data = response.data.map((record) => [record.temperature, record.windSpeed, record.humidity]);\r\n        setChartData({\r\n          labels: labels,\r\n          datasets: [\r\n            {\r\n              label: 'Temperatur',\r\n              data: data[i][0],\r\n              borderColor: 'rgb(255, 99, 132)',\r\n              backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n              borderWidth: 3,\r\n            },\r\n            {\r\n              label: 'Vindhastighed',\r\n              data: data,\r\n              borderColor: 'rgb(53, 162, 235)',\r\n              backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n              borderWidth: 3,\r\n            },\r\n            {\r\n              label: 'Luftfugtighed',\r\n              data: data,\r\n              borderColor: 'rgb(112, 171, 56)',\r\n              backgroundColor: 'rgba(112, 171, 56, 0.5)',\r\n              borderWidth: 3,\r\n            }\r\n          ]\r\n        });\r\n        setLoading(false); // Update loading state\r\n      })\r\n      .catch(error => {\r\n        setError(error);\r\n        setLoading(false); // Update loading state even if there's an error\r\n      });\r\n  }, []);\r\n\r\n  if (loading) return \"Loading...\"; // Display loading message while waiting for API response\r\n  if (error) return `Error: ${error.message}`;\r\n  if (!weatherRecords || weatherRecords.length === 0) return \"No weather records!\";\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"container\">\r\n        <div className=\"topbuttons\">\r\n          <TopButtons />\r\n        </div>\r\n        \r\n        <div className=\"chartContainer\">\r\n            <LineChart chartData={chartData}/>\r\n        </div>\r\n        \r\n          <ChartButtons />\r\n        \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default History;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}